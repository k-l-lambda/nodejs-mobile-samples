apply plugin: 'com.android.library'

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            //version "3.10.2"
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

}


/*afterEvaluate {
	task copyLibs(type: Copy) {
		println 'configure of copy libnativeLib.so'
		//dependsOn "assembleDebug"

		//doLast {
			println 'copy libnativeLib.so'
			from('build/intermediates/cmake/debug/obj/x86') {
				//include 'libfunctionCall.so'
				include '*.so'
				//rename 'libfunctionCall.so', 'function-call.node'
			}
			//into project(':app').file('./src/main/assets/nodejs-project')
			into ".."
			rename { String fileName ->
				fileName = "function-call.node"
			}
		//}
	}
}*/

/*task copyLibs(type: Exec) {
    workingDir "$projectDir"
	println 'copy libnativeLib.so'
    //commandLine 'cp ./build/intermediates/cmake/debug/obj/x86/libfunctionCall.so ../app/src/main/assets/nodejs-project/function-call.node'
    commandLine 'sh', './copyLibs.sh'
}*/
